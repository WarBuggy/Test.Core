@page
@using Microsoft.Extensions.Localization
@using Volo.Abp.AspNetCore.Mvc.UI.Bootstrap.TagHelpers.Modal
@using Volo.Abp.Data
@using Volo.Abp.Localization
@using Volo.Abp.ObjectExtending
@using Volo.Saas
@using Volo.Saas.Host.Pages.Saas.Host.Tenants
@using Volo.Saas.Localization
@using TestMDM.Localization
@model Test.Core.Web.Pages.Saas.Host.Tenants.ModCreateModalModel
@inject IStringLocalizer<SaasResource> L
@inject IStringLocalizer<TestMDMResource> LTestMDM
@inject IStringLocalizerFactory StringLocalizerFactory
@{
    Layout = null;
}
<form method="post" asp-page="/Saas/Host/Tenants/CreateModal">
    <abp-modal size="Large">
        <abp-modal-header title="@L["NewTenant"]"></abp-modal-header>
        <abp-modal-body>
            <abp-tabs>
                <abp-tab title="@L["TenantBaseInfo"].Value">
                    <abp-input asp-for="Tenant.Name" />
                    @if (Model.EditionsComboboxItems.Count > 1)
                    {
                        <abp-select asp-for="Tenant.EditionId" />
                    }
                    <abp-input asp-for="Tenant.AdminEmailAddress" />
                    <abp-input asp-for="Tenant.AdminPassword" />

                    <abp-select asp-for="Tenant.ActivationState"></abp-select>
                    <div style="@(Model.Tenant.ActivationState == TenantActivationState.ActiveWithLimitedTime ? "" : "display: none;")">
                        <abp-input asp-for="Tenant.ActivationEndDate"></abp-input>
                    </div>

                    @foreach (var propertyInfo in ObjectExtensionManager.Instance.GetProperties<CreateModalModel.TenantInfoModel>())
                    {
                        if (propertyInfo.Type.IsEnum || !propertyInfo.Lookup.Url.IsNullOrEmpty())
                        {
                            if (propertyInfo.Type.IsEnum)
                            {
                                Model.Tenant.ExtraProperties.ToEnum(propertyInfo.Name, propertyInfo.Type);
                            }
                            <abp-select asp-for="Tenant.ExtraProperties[propertyInfo.Name]"
                                label="@propertyInfo.GetLocalizedDisplayName(StringLocalizerFactory)"
                                autocomplete-api-url="@propertyInfo.Lookup.Url"
                                autocomplete-selected-item-name="@Model.Tenant.GetProperty(propertyInfo.Name+"_Text")"
                                autocomplete-selected-item-value="@Model.Tenant.GetProperty(propertyInfo.Name)"
                                autocomplete-filter-param-name="@propertyInfo.Lookup.FilterParamName"
                                autocomplete-items-property-name="@propertyInfo.Lookup.ResultListPropertyName"
                                autocomplete-display-property-name="@propertyInfo.Lookup.DisplayPropertyName"
                                autocomplete-value-property-name="@propertyInfo.Lookup.ValuePropertyName"></abp-select>
                        }
                        else
                        {
                            <abp-input type="@propertyInfo.GetInputType()"
                               asp-for="Tenant.ExtraProperties[propertyInfo.Name]"
                               label="@propertyInfo.GetLocalizedDisplayName(StringLocalizerFactory)"
                               asp-format="@propertyInfo.GetInputFormatOrNull()"
                               value="@propertyInfo.GetInputValueOrNull(Model.Tenant.GetProperty(propertyInfo.Name))" />
                        }
                    }
                </abp-tab>
                <abp-tab title="@LTestMDM["TabTitle:DistributorHQ"]">
                    <abp-input asp-for="DistributorHQ.Name" />
                    <abp-input asp-for="DistributorHQ.TaxId" />
                </abp-tab>
                <abp-tab title="@L["ConnectionStrings"].Value">
                    <abp-input asp-for="Tenant.UseSharedDatabase" />
                    <div id="Tenant_ConnectionStrings_Wrap" class="@(Model.Tenant.UseSharedDatabase ? "d-none" : "")">
                        <abp-input asp-for="Tenant.ConnectionStrings.Default" />
                        @if (!Model.DatabaseSelectListItems.IsNullOrEmpty())
                        {
                            <div class="row">
                                <div class="mb-3 col-md-3">
                                    <abp-select asp-for="DatabaseName" asp-items="@Model.DatabaseSelectListItems"></abp-select>
                                </div>
                                <div class="mb-3 col-md-7">
                                    <abp-input asp-for="ConnectionString" />
                                </div>
                                <div class="mb-3 col-md-2 mt-4">
                                    <button id="AddDatabaseConnectionString" type="button" class="btn btn-primary">@L["AddDatabaseConnectionString"]</button>
                                </div>
                            </div>

                            <div class="row">
                                <table class="table">
                                    <thead>
                                        <tr>
                                            <th>@L["DisplayName:DatabaseName"]</th>
                                            <th>@L["DisplayName:ConnectionString"]</th>
                                            <th>@L["Actions"]</th>
                                        </tr>
                                    </thead>
                                    <tbody id="ConnectionStringsTBody">
                                    </tbody>
                                </table>
                            </div>
                        }

                    </div>
                </abp-tab>
            </abp-tabs>
        </abp-modal-body>
        <abp-modal-footer buttons="@(AbpModalButtons.Cancel|AbpModalButtons.Save)"></abp-modal-footer>
    </abp-modal>
</form>
